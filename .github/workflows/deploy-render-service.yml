name: CI & Deploy (Friday)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        working-directory: backend
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # Be flexible if your file is named requirement.txt instead of requirements.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirement.txt ]; then pip install -r requirement.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Quick import smoke
        working-directory: backend
        shell: bash
        run: |
          python - <<'PY'
          import flask, flask_cors
          print("flask:", flask.__version__, "flask-cors:", flask_cors.__version__)
          PY

      - name: Run tests (optional)
        working-directory: backend
        shell: bash
        run: |
          python -m pytest -q || echo "No tests found; continuing…"

      - name: Trigger Render deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        shell: bash
        run: |
          if [ -z "$RENDER_API_KEY" ] || [ -z "$RENDER_SERVICE_ID" ]; then
            echo "❌ Missing RENDER_API_KEY or RENDER_SERVICE_ID repository secrets."
            exit 1
          fi

          echo "🚀 Kicking off Render deploy for service $RENDER_SERVICE_ID…"
          curl -sS -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            --data '{"clearCache":true}' \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            | tee render_response.json

          python - <<'PY'
          import json, sys
          j = json.load(open('render_response.json'))
          if 'id' in j:
              print("✅ Render deploy started. id:", j['id'])
          else:
              print("❌ Render API error/response:", j)
              sys.exit(1)
          PY

      - name: (Optional) Wait for health check
        if: success()
        env:
          HEALTH_URL: ${{ secrets.RENDER_HEALTH_URL }}  # e.g., https://your-friday-backend.onrender.com/health
        shell: bash
        run: |
          if [ -z "$HEALTH_URL" ]; then
            echo "⏭️ No RENDER_HEALTH_URL set; skipping health check."
            exit 0
          fi

          echo "⏱️ Waiting for service to return 200 at: $HEALTH_URL"
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL")
            echo "Try $i: HTTP $code"
            if [ "$code" = "200" ]; then
              echo "✅ Healthy!"
              exit 0
            fi
            sleep 5
          done

          echo "❌ Health check never returned 200."
          exit 1



