name: CI & Deploy (Friday)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ⬇️ Root layout: files are in the repo root (NO backend/).
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Optional quick smoke (only static imports/lint). Won't fail the build if absent.
      - name: Quick import smoke (non-fatal)
        continue-on-error: true
        env:
          # avoid your app importing OpenAI during import time
          OPENAI_API_KEY: "sk-test-placeholder"
        run: |
          python - << 'PY'
          try:
              import app  # ensure it imports
              print("OK: app imported")
          except Exception as e:
              print("WARN: import failed ->", e)
          PY

      # Optional tests (if you add pytest later)
      - name: Run tests (optional)
        if: hashFiles('tests/**/*.py') != ''
        run: pytest -q

      # ---- DEPLOY TO RENDER ----
      - name: Trigger Render deploy via Deploy Hook
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          if [ -z "$RENDER_DEPLOY_HOOK" ]; then
            echo "::error::Missing secret RENDER_DEPLOY_HOOK"
            exit 1
          fi
          curl -fsSL -X POST "$RENDER_DEPLOY_HOOK"

      # Wait and poll health until it's up (max ~6 minutes)
      - name: Wait for Render health
        env:
          BASE: ${{ secrets.RENDER_PUBLIC_URL }}
        run: |
          if [ -z "$BASE" ]; then
            echo "::error::Missing secret RENDER_PUBLIC_URL"
            exit 1
          fi
          echo "Waiting for $BASE/health ..."
          for i in $(seq 1 36); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$BASE/health" || true)
            if [ "$code" = "200" ]; then
              echo "Health check OK"
              exit 0
            fi
            echo "Attempt $i/36 -> HTTP $code; sleeping 10s"
            sleep 10
          done
          echo "::error::Health check never returned 200"
          exit 1




